import "util.scrypt";
import "tokenProto.scrypt";
import "txUtil.scrypt";
import "rabinUtil.scrypt";

/**
 * A token protocol based on UTXO model
 */
contract Token {
  int[3] rabinPubKeyArray;
  bytes amountCheckCodeHash;

  function verifyAmountCheckContract(
    bytes prevouts,
    int contractInputIndex,
    bytes prevScriptTx,
    int prevScriptOutIndex,
    bytes tokenID,
    int nReceivers,
    bytes receiverArray,
    bytes receiverTokenAmountArray
  ): bool {
    // verify script
    bytes prevScriptTxId = prevouts[contractInputIndex * TxUtil.OUTPOINT_LEN: contractInputIndex * TxUtil.OUTPOINT_LEN + TxUtil.TX_ID_LEN];
    require(hash256(prevScriptTx) == prevScriptTxId);

    bytes prevScriptCode = TxUtil.readOutputScript(prevScriptTx, prevScriptOutIndex);
    int scriptLen = len(prevScriptCode);

    require(tokenID == prevScriptCode[scriptLen - TokenProto.TOKEN_ID_LEN: scriptLen]);
    int pos = TokenProto.TOKEN_ID_LEN;

    int nReceivers2 = Util.fromLEUnsigned(prevScriptCode[scriptLen - pos - 1: scriptLen - pos]);
    require(nReceivers2 == nReceivers);
    pos += 1;

    bytes receiverArray2 = prevScriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_ADDRESS_LEN: scriptLen - pos];
    require(receiverArray2 == receiverArray);
    pos += nReceivers * TokenProto.TOKEN_ADDRESS_LEN;

    bytes receiverTokenAmountArray2 = prevScriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_AMOUNT_LEN: scriptLen - pos];
    require(receiverTokenAmountArray2 == receiverTokenAmountArray);
    pos += nReceivers * TokenProto.TOKEN_AMOUNT_LEN;

    bytes contractCode = prevScriptCode[: scriptLen - pos];

    return hash160(contractCode) == this.amountCheckCodeHash;
  }

  /** 
   * transfer token from n input to n output
   * @function route
   * @param txPreimage {SigHashPreimage} the input preimage
   * @param senderPubKey {PubKey} the signature of sender
   * @param senderSig {Sig} the signature of sender
   * @param nSenders {int} the number of input token utxos
   * @param prevouts {bytes} the previous outputs of tx
   * @param rabinMsgArray {bytes} the msg array with length of nSenders
   * @param rabinPaddingArray {bytes} the padding array with length of nSenders * 3
   * @param rabinSigArray {bytes} the signature array with length of nSenders * 3
   * @param nReceivers {int} the number of token receivers
   * @param receiverArray {bytes} the receiver address array with length of nReceivers
   * @param receiverTokenAmountArray {bytes} the receiver output token amount array with length of nReceivers
   * @param receiverSatoshiArray {bytes} the receiver output satoshi amount array with length of nReceivers
   * @param changeSatoshis {int} change satoshis amount 
   * @param changeAddress {Ripemd160} change address 
  */
  public function route(
    SigHashPreimage txPreimage,
    PubKey senderPubKey,
    Sig senderSig,
    bytes rabinMsg,
    bytes[3] rabinPaddingArray,
    int[3] rabinSigArray,
    bytes prevouts,
    int contractInputIndex,
    bytes prevScriptTx,
    int prevScriptOutIndex,
    int nReceivers,
    bytes receiverArray,
    bytes receiverTokenAmountArray
  ) {

    require(Tx.checkPreimage(txPreimage));

    require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

    require(nReceivers > 0);

    bytes tokenScript = Util.scriptCode(txPreimage);
    int scriptLen = len(tokenScript);
    bytes senderAddress = TokenProto.getTokenAddress(tokenScript, scriptLen);
    bytes tokenID = TokenProto.getTokenID(tokenScript, scriptLen);
    bytes contractCode = TokenProto.getContractCode(tokenScript, scriptLen);

    // authorize
    require(hash160(senderPubKey) == senderAddress);
    require(checkSig(senderSig, senderPubKey));

    bytes thisOutpoint = Util.outpoint(txPreimage);
    // verify rabin signature
    bool res = RabinUtil.verifyInputMsg(this.rabinPubKeyArray, rabinMsg, rabinPaddingArray, rabinSigArray, thisOutpoint, tokenID, contractCode);
    require(res == true);

    res = this.verifyAmountCheckContract(prevouts, contractInputIndex, prevScriptTx, prevScriptOutIndex, tokenID, nReceivers, receiverArray, receiverTokenAmountArray);
    require(res == true);
  }

}