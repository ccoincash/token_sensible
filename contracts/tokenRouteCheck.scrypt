import "util.scrypt";
import "tokenProto.scrypt";
import "rabinUtil.scrypt";

// opreturn + receiverTokenAmountArray + receiverArray + nReceivers(1 bytes) + tokenID
contract TokenRouteCheck {
  int[3] rabinPubKeyArray;
    
  /**
   * @param changeSatoshis {int} change satoshis amount 
   * @param changeAddress {Ripemd160} change address 
  */
  public function unlock(
    SigHashPreimage txPreimage,
    int nSenders,
    bytes prevouts,
    bytes rabinMsgArray,
    bytes rabinPaddingArray,
    bytes rabinSigArray,
    bytes receiverSatoshiArray,
    int changeSatoshis,
    Ripemd160 changeAddress
  ) {

    require(Tx.checkPreimage(txPreimage));

    require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);
    bytes tokenID = scriptCode[scriptLen - TokenProto.TOKEN_ID_LEN: ];

    tokenID = scriptCode[scriptLen - TokenProto.TOKEN_ID_LEN: scriptLen];
    int pos = TokenProto.TOKEN_ID_LEN;

    int nReceivers = Util.fromLEUnsigned(scriptCode[scriptLen - pos - 1: scriptLen - pos]);
    pos += 1;

    bytes receiverArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_ADDRESS_LEN: scriptLen - pos];
    pos += nReceivers * TokenProto.TOKEN_ADDRESS_LEN;

    bytes receiverTokenAmountArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_AMOUNT_LEN: scriptLen - pos];

    int i = 0;
    int sumInputToken = 0;
    int msgPos = 0;
    int paddingPos = 0;
    bytes tokenScript = b'';
    require(nSenders <= 8);
    // max support loop num input token
    loop(8) {
      if (i < nSenders) {
        int pubIndex = 0;
        // verify rabin signature
        int msgLen = Util.fromLEUnsigned(rabinMsgArray[msgPos: msgPos + 4]);
        bytes rabinMsg = rabinMsgArray[msgPos + RabinUtil.MSG_SIZE_LEN: msgPos + RabinUtil.MSG_SIZE_LEN + msgLen];
        msgPos += RabinUtil.MSG_SIZE_LEN + msgLen;
        int verifyCount = 0;
        loop(3) {
          int rabinPubKey = this.rabinPubKeyArray[pubIndex];
          int arrayIndex = i * 3 + pubIndex;
          int rabinSig = Util.fromLEUnsigned(rabinSigArray[arrayIndex * RabinUtil.RABIN_SIG_LEN: (arrayIndex + 1) * RabinUtil.RABIN_SIG_LEN]);
          int paddingLen = Util.fromLEUnsigned(rabinPaddingArray[paddingPos: paddingPos + RabinUtil.PADDING_SIZE_LEN]);
          bytes padding = b'';
          if (paddingLen > 0) {
            padding = rabinPaddingArray[paddingPos + RabinUtil.PADDING_SIZE_LEN: paddingPos + RabinUtil.PADDING_SIZE_LEN + paddingLen];
          }
          paddingPos += RabinUtil.PADDING_SIZE_LEN + paddingLen;
          int h = RabinUtil.rabinHash(rabinMsg + padding);
          if ((rabinSig * rabinSig) % rabinPubKey == h % rabinPubKey) {
            verifyCount += 1;
          }
          pubIndex += 1;
        }
        require(verifyCount >= 2);

        RabinUtil.checkOutputPoint(prevouts, i, rabinMsg);

        bytes lockingScript = RabinUtil.getMsgLockingScript(rabinMsg);
        int lsLen = len(lockingScript);
        int inputTokenAmount = TokenProto.getTokenAmount(lockingScript, lsLen);
        require(tokenID == TokenProto.getTokenID(lockingScript, lsLen));
        tokenScript = lockingScript;

        sumInputToken = sumInputToken + inputTokenAmount;
      }
      i = i + 1;
    }
    
    // check the outputs
    bytes outputs = b'';
    // max support loop num receiver, you can change this num, but will cause the contrac size increase. you can customize your output
    i = 0;
    int sumOutputToken = 0;
    require(nReceivers <= 4);
    int tokenScriptLen = len(tokenScript);
    loop(4) {
      if (i < nReceivers) {
        bytes address = receiverArray[i * TokenProto.TOKEN_ADDRESS_LEN: (i + 1) * TokenProto.TOKEN_ADDRESS_LEN];
        int tokenAmount = Util.fromLEUnsigned(receiverTokenAmountArray[i * TokenProto.TOKEN_AMOUNT_LEN: (i + 1) * TokenProto.TOKEN_AMOUNT_LEN]);
        sumOutputToken = sumOutputToken + tokenAmount;
        bytes outputScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, tokenAmount);
        int outputSatoshi = Util.fromLEUnsigned(receiverSatoshiArray[i * 8: (i + 1) * 8]);
        bytes output = Util.buildOutput(outputScript, outputSatoshi);
        outputs = outputs + output;
      }
      i = i + 1;
    }
    require(sumInputToken == sumOutputToken);
    if (changeSatoshis > 0) {
      bytes outputScript = Util.buildPublicKeyHashScript(changeAddress);
      bytes output = Util.buildOutput(outputScript, changeSatoshis);
      outputs = outputs + output;
    }
    bytes hashOutputs = hash256(outputs);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}