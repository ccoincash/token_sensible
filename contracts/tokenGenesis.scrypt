import "util.scrypt";
import "tokenProto.scrypt";

contract tokenGenesis {
  PubKey pubKey;

  public function unlock(
    SigHashPreimage txPreimage,
    Sig sig,
    int genesisSatoshis,
    bytes tokenScript,
    int tokenSatoshi,
    Ripemd160 changeAddress,
    int changeSatoshis
    ) {

    require(Tx.checkPreimageOpt(txPreimage));

    // check sig
    require(checkSig(sig, this.pubKey));

    // TODO: verify rabinMsg

    // check input script oracle data
    bytes genesisScript = Util.scriptCode(txPreimage);
    int dataLen = len(genesisScript);
    bytes tokenName = TokenProto.getTokenName(genesisScript, dataLen);
    bytes tokenSymbol = TokenProto.getTokenSymbol(genesisScript, dataLen);
    int isGenesis = TokenProto.getGenesisFlag(genesisScript, dataLen);
    require(isGenesis == 1);
    int decimalNum = TokenProto.getDecimalNum(genesisScript, dataLen);
    bytes address = TokenProto.getTokenAddress(genesisScript, dataLen);
    require(address == b'0000000000000000000000000000000000000000');
    int tokenValue = TokenProto.getTokenAmount(genesisScript, dataLen);
    require(tokenValue == 0);
    bytes tokenID = TokenProto.getTokenID(genesisScript, dataLen);
    bool isFirst = false;
    if (tokenID == b'000000000000000000000000000000000000000000000000000000000000000000000000') {
      isFirst = true;
      tokenID = Util.outpoint(txPreimage);
    } 
    int protoType = TokenProto.getProtoType(genesisScript, dataLen);
    require(protoType == TokenProto.PROTO_TYPE);
    bytes flag = TokenProto.getProtoFlag(genesisScript, dataLen);
    require(flag == TokenProto.PROTO_FLAG);

    // check tokenScript oracle data
    dataLen = len(tokenScript);

    require(tokenName == TokenProto.getTokenName(tokenScript, dataLen));
    require(tokenSymbol == TokenProto.getTokenSymbol(tokenScript, dataLen));
    require(0 == TokenProto.getGenesisFlag(tokenScript, dataLen));
    require(decimalNum == TokenProto.getDecimalNum(tokenScript, dataLen));
    require(tokenID == TokenProto.getTokenID(tokenScript, dataLen));
    protoType = TokenProto.getProtoType(tokenScript, dataLen);
    require(protoType == TokenProto.PROTO_TYPE);
    require(TokenProto.PROTO_FLAG == TokenProto.getProtoFlag(tokenScript, dataLen));

    bytes genesisOutput = b'';
    if (genesisSatoshis > 0) {
      genesisOutput = Util.buildOutput(genesisScript, genesisSatoshis);
    }
    bytes tokenOutput = Util.buildOutput(tokenScript, tokenSatoshi);
    bytes changeOutput = b'';
    if (changeSatoshis > 0) {
      bytes changeScript = Util.buildPublicKeyHashScript(changeAddress);
      changeOutput = Util.buildOutput(changeScript, changeSatoshis);
    }
    bytes hashOutput = hash256(genesisOutput + tokenOutput + changeOutput);
    require(hashOutput == Util.hashOutputs(txPreimage));
  }
}